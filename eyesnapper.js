// Generated by LiveScript 1.4.0
(function(){
  var showText, showControls, startSession, showWordListForm, out$ = typeof exports != 'undefined' && exports || this;
  out$.showText = showText = function(arg$){
    var text, location, font, ref$, possibleLocations, locationCss, x$, element;
    text = arg$.text, location = arg$.location, font = (ref$ = arg$.font) != null ? ref$ : "15%";
    possibleLocations = [
      [
        {
          top: "1em",
          left: "1em"
        }, {
          top: "50%",
          left: "1em",
          marginTop: "-0.5em"
        }, {
          bottom: "1em",
          left: "1em"
        }
      ], [
        {
          top: "1em",
          right: "1em"
        }, {
          top: "50%",
          right: "1em",
          marginTop: "-0.5em"
        }, {
          bottom: "1em",
          right: "1em"
        }
      ]
    ][location];
    locationCss = possibleLocations[Math.floor(Math.random() * possibleLocations.length)];
    x$ = element = $("<div>");
    x$.text(text);
    x$.addClass('eyesnapper-text-label');
    x$.css(import$(locationCss, {
      display: "block",
      position: "fixed",
      font: font
    }));
    return element.appendTo(document.body);
  };
  out$.showControls = showControls = function(bpm, setBpm, end){
    var refreshControls, x$, endButton, genButton, y$, container;
    refreshControls = function(button){
      $(".bpm-button").removeClass("active");
      if (button) {
        return $(button).addClass("active");
      }
    };
    x$ = endButton = $("<button>");
    x$.addClass("control-button");
    x$.text("End");
    x$.click(function(){
      return end();
    });
    genButton = function(b){
      var x$;
      x$ = $("<button>");
      x$.text(b + "");
      x$.addClass("control-button");
      x$.addClass("bpm-button");
      if (bpm === b) {
        x$.addClass("active");
      }
      x$.click(function(){
        setBpm(b);
        return refreshControls(this);
      });
      return x$;
    };
    y$ = container = $("<div>");
    y$.append(endButton);
    y$.append(genButton(30));
    y$.append(genButton(35));
    y$.append(genButton(40));
    y$.append(genButton(45));
    y$.append(genButton(50));
    y$.append(genButton(55));
    y$.append(genButton(60));
    y$.append(genButton(65));
    y$.append(genButton(70));
    y$.append(genButton(75));
    y$.append(genButton(80));
    y$.append(genButton(85));
    y$.append(genButton(90));
    y$.appendTo(document.body);
    y$.css({
      position: 'fixed',
      width: '100%',
      textAlign: 'center',
      bottom: 0,
      marginLeft: 'auto',
      marginRight: 'auto'
    });
    return container;
  };
  out$.startSession = startSession = function(arg$, cc){
    var wordList, bpm, length, ref$, running, intervalTimer, visibleText, end, endTimer, setBpm, controls, currentLocation, step;
    wordList = arg$.wordList, bpm = arg$.bpm, length = (ref$ = arg$.length) != null ? ref$ : 60;
    console.log("Running session with", wordList, "and", bpm);
    running = true;
    intervalTimer = null;
    visibleText = null;
    end = function(){
      running = false;
      clearTimeout(endTimer);
      return step();
    };
    endTimer = setTimeout(function(){
      return end();
    }, length * 1000);
    setBpm = function(newBpm){
      step();
      bpm = newBpm;
      if (typeof removeText == 'function') {
        removeText();
      }
      clearInterval(intervalTimer);
      return intervalTimer = setInterval(step, 60 * 1000 / newBpm);
    };
    controls = showControls(bpm, setBpm, end);
    currentLocation = 0;
    step = function(){
      var whichText;
      if (visibleText != null) {
        visibleText.remove();
      }
      if (running) {
        whichText = wordList[Math.floor(Math.random() * wordList.length)];
        visibleText = showText({
          text: whichText,
          location: currentLocation
        });
        return currentLocation = 1 - currentLocation;
      } else {
        controls.remove();
        clearInterval(intervalTimer);
        return cc(bpm);
      }
    };
    return setBpm(bpm);
  };
  out$.showWordListForm = showWordListForm = function(wordList, cc){
    var render, element, i$, len$, word, x$, y$;
    wordList == null && (wordList = []);
    render = function(it){
      return CoffeeKup.render(it, {
        autoescape: true,
        wordList: wordList
      });
    };
    element = $("<form>");
    $("<h2>").text("EyeSnapper").appendTo(element);
    while (wordList.length < 6) {
      wordList = wordList.concat([""]);
    }
    for (i$ = 0, len$ = wordList.length; i$ < len$; ++i$) {
      word = wordList[i$];
      x$ = $("<input>");
      x$.addClass('test');
      x$.attr({
        autofocus: true,
        type: 'text',
        'class': 'word-input',
        placeholder: "Enter a word...",
        value: word
      });
      x$.appendTo(element);
    }
    y$ = $("<button>");
    y$.addClass('begin');
    y$.text("Begin");
    y$.appendTo(element);
    y$.click(function(){
      var wordList, res$, i$, ref$, len$, text;
      res$ = [];
      for (i$ = 0, len$ = (ref$ = element.find(".word-input")).length; i$ < len$; ++i$) {
        text = ref$[i$];
        if (text.value) {
          res$.push(text.value);
        }
      }
      wordList = res$;
      if (wordList.length) {
        element.remove();
        cc(wordList);
      }
      return false;
    });
    return element.appendTo(document.body);
  };
  $(function(){
    var start;
    start = function(wordList, bpm){
      bpm == null && (bpm = 60);
      return showWordListForm(wordList, function(wordList){
        return startSession({
          wordList: wordList,
          bpm: bpm,
          length: 60
        }, function(bpm){
          return start(wordList, bpm);
        });
      });
    };
    return start();
  });
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);

//# sourceMappingURL=data:application/json;base64,
